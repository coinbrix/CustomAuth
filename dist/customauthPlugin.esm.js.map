{"version":3,"file":"customauthPlugin.esm.js","sources":["../src/utils/enums.ts","../src/utils/loglevel.ts","../src/utils/helpers.ts","../src/utils/PopupHandler.ts","../src/handlers/AbstractLoginHandler.ts","../src/handlers/DiscordHandler.ts","../src/handlers/FacebookHandler.ts","../src/handlers/GoogleHandler.ts","../src/handlers/JwtHandler.ts","../src/handlers/MockLoginHandler.ts","../src/handlers/PasswordlessHandler.ts","../src/handlers/RedditHandler.ts","../src/handlers/TwitchHandler.ts","../src/handlers/WebAuthnHandler.ts","../src/handlers/HandlerFactory.ts","../src/registerServiceWorker.ts","../src/sentry.ts","../src/utils/StorageHelper.ts","../src/login.ts"],"sourcesContent":["export const LOGIN = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  GITHUB: \"github\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  LINE: \"line\",\n  EMAIL_PASSWORD: \"email_password\",\n  PASSWORDLESS: \"passwordless\",\n  JWT: \"jwt\",\n  WEBAUTHN: \"webauthn\",\n} as const;\n\nexport const AGGREGATE_VERIFIER = {\n  SINGLE_VERIFIER_ID: \"single_id_verifier\",\n  // AND_AGGREGATE_VERIFIER : \"and_aggregate_verifier\",\n  // OR_AGGREGATE_VERIFIER : \"or_aggregate_verifier\",\n} as const;\n\nexport const UX_MODE = {\n  POPUP: \"popup\",\n  REDIRECT: \"redirect\",\n} as const;\n\nexport const REDIRECT_PARAMS_STORAGE_METHOD = {\n  LOCAL_STORAGE: \"localStorage\",\n  SESSION_STORAGE: \"sessionStorage\",\n  SERVER: \"server\",\n};\n\nexport const TORUS_METHOD = {\n  TRIGGER_LOGIN: \"triggerLogin\",\n  TRIGGER_AGGREGATE_LOGIN: \"triggerAggregateLogin\",\n  TRIGGER_AGGREGATE_HYBRID_LOGIN: \"triggerHybridAggregateLogin\",\n} as const;\n\nexport type LOGIN_TYPE = (typeof LOGIN)[keyof typeof LOGIN];\nexport type AGGREGATE_VERIFIER_TYPE = (typeof AGGREGATE_VERIFIER)[keyof typeof AGGREGATE_VERIFIER];\nexport type UX_MODE_TYPE = (typeof UX_MODE)[keyof typeof UX_MODE];\nexport type TORUS_METHOD_TYPE = (typeof TORUS_METHOD)[keyof typeof TORUS_METHOD];\nexport type REDIRECT_PARAMS_STORAGE_METHOD_TYPE = (typeof REDIRECT_PARAMS_STORAGE_METHOD)[keyof typeof REDIRECT_PARAMS_STORAGE_METHOD];\n\nexport const SENTRY_TXNS = {\n  FETCH_NODE_DETAILS: \"fetchNodeDetails\",\n  PUB_ADDRESS_LOOKUP: \"pubAddressLookup\",\n  FETCH_SHARES: \"fetchShares\",\n} as const;\n","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"customauth\");\n","import base64url from \"base64url\";\nimport Bowser from \"bowser\";\n\nimport { Auth0UserInfo, TorusGenericObject } from \"../handlers/interfaces\";\nimport { LOGIN, LOGIN_TYPE, REDIRECT_PARAMS_STORAGE_METHOD_TYPE } from \"./enums\";\nimport log from \"./loglevel\";\ninterface CustomMessageEvent extends MessageEvent {\n  error: string;\n}\n\ninterface EventListener {\n  (evt: CustomMessageEvent): void;\n}\n\ntype EmitterType = { addEventListener(type: string, handler: EventListener): void; removeEventListener(type: string, handler: EventListener): void };\n\nexport function eventToPromise<T>(emitter: EmitterType): Promise<T> {\n  return new Promise<T>((resolve, reject) => {\n    const handler = (ev: CustomMessageEvent) => {\n      const { error = \"\", data } = ev;\n      emitter.removeEventListener(\"message\", handler);\n      if (error) return reject(new Error(error));\n      return resolve(data as T);\n    };\n    emitter.addEventListener(\"message\", handler);\n  });\n}\n\n// These are the default connection names used by auth0\nexport const loginToConnectionMap = {\n  [LOGIN.APPLE]: \"apple\",\n  [LOGIN.GITHUB]: \"github\",\n  [LOGIN.LINKEDIN]: \"linkedin\",\n  [LOGIN.TWITTER]: \"twitter\",\n  [LOGIN.WEIBO]: \"weibo\",\n  [LOGIN.LINE]: \"line\",\n  [LOGIN.EMAIL_PASSWORD]: \"Username-Password-Authentication\",\n  [LOGIN.PASSWORDLESS]: \"email\",\n};\n\nexport const padUrlString = (url: URL): string => (url.href.endsWith(\"/\") ? url.href : `${url.href}/`);\n\n/**\n * Returns a random number. Don't use for cryptographic purposes.\n * @returns a random number\n */\nexport const randomId = (): string => Math.random().toString(36).slice(2);\n\nexport const broadcastChannelOptions = {\n  // type: 'localstorage', // (optional) enforce a type, oneOf['native', 'idb', 'localstorage', 'node']\n  webWorkerSupport: false, // (optional) set this to false if you know that your channel will never be used in a WebWorker (increases performance)\n};\n\nfunction caseSensitiveField(field: string, isCaseSensitive?: boolean): string {\n  return isCaseSensitive ? field : field.toLowerCase();\n}\n\nexport const getVerifierId = (\n  userInfo: Auth0UserInfo,\n  typeOfLogin: LOGIN_TYPE,\n  verifierIdField?: keyof Auth0UserInfo,\n  isVerifierIdCaseSensitive = true\n): string => {\n  const { name, sub } = userInfo;\n  if (verifierIdField) return caseSensitiveField(userInfo[verifierIdField], isVerifierIdCaseSensitive);\n  switch (typeOfLogin) {\n    case LOGIN.PASSWORDLESS:\n    case LOGIN.EMAIL_PASSWORD:\n      return caseSensitiveField(name, isVerifierIdCaseSensitive);\n    case LOGIN.WEIBO:\n    case LOGIN.GITHUB:\n    case LOGIN.TWITTER:\n    case LOGIN.APPLE:\n    case LOGIN.LINKEDIN:\n    case LOGIN.LINE:\n    case LOGIN.JWT:\n      return caseSensitiveField(sub, isVerifierIdCaseSensitive);\n    default:\n      throw new Error(\"Invalid login type\");\n  }\n};\n\nexport const handleRedirectParameters = (\n  hash: string,\n  queryParameters: TorusGenericObject\n): { error: string; instanceParameters: TorusGenericObject; hashParameters: TorusGenericObject } => {\n  const hashParameters: TorusGenericObject = hash.split(\"&\").reduce((result: Record<string, string>, item) => {\n    const [part0, part1] = item.split(\"=\");\n    result[part0] = part1;\n    return result;\n  }, {});\n  log.info(hashParameters, queryParameters);\n  let instanceParameters: TorusGenericObject = {};\n  let error = \"\";\n  if (Object.keys(hashParameters).length > 0 && hashParameters.state) {\n    instanceParameters = JSON.parse(base64url.decode(decodeURIComponent(decodeURIComponent(hashParameters.state)))) || {};\n    error = hashParameters.error_description || hashParameters.error || error;\n  } else if (Object.keys(queryParameters).length > 0 && queryParameters.state) {\n    instanceParameters = JSON.parse(base64url.decode(decodeURIComponent(decodeURIComponent(queryParameters.state)))) || {};\n    if (queryParameters.error) error = queryParameters.error;\n  }\n  return { error, instanceParameters, hashParameters };\n};\n\nexport function storageAvailable(type: REDIRECT_PARAMS_STORAGE_METHOD_TYPE): boolean {\n  let storage: Storage;\n  try {\n    storage = window[type as \"sessionStorage\" | \"localStorage\"];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (error: unknown) {\n    const e = error as { code?: number; name?: string };\n    return (\n      e &&\n      // everything except Firefox\n      (e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === \"QuotaExceededError\" ||\n        // Firefox\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    );\n  }\n}\n\nexport function getPopupFeatures(): string {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n  const w = 1200;\n  const h = 700;\n\n  const width = window.innerWidth\n    ? window.innerWidth\n    : document.documentElement.clientWidth\n      ? document.documentElement.clientWidth\n      : window.screen.width;\n\n  const height = window.innerHeight\n    ? window.innerHeight\n    : document.documentElement.clientHeight\n      ? document.documentElement.clientHeight\n      : window.screen.height;\n\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n\nexport const isFirefox = (): boolean => window?.navigator?.userAgent.toLowerCase().indexOf(\"firefox\") > -1 || false;\n\nexport function constructURL(params: { baseURL: string; query?: Record<string, unknown>; hash?: Record<string, unknown> }): string {\n  const { baseURL, query, hash } = params;\n\n  const url = new URL(baseURL);\n  if (query) {\n    Object.keys(query).forEach((key) => {\n      url.searchParams.append(key, query[key] as string);\n    });\n  }\n  if (hash) {\n    const h = new URL(constructURL({ baseURL, query: hash })).searchParams.toString();\n    url.hash = h;\n  }\n  return url.toString();\n}\n\nexport function are3PCSupported(): boolean {\n  const browserInfo = Bowser.parse(navigator.userAgent);\n  log.info(JSON.stringify(browserInfo), \"current browser info\");\n\n  let thirdPartyCookieSupport = true;\n  // brave\n  if ((navigator as unknown as { brave: boolean })?.brave) {\n    thirdPartyCookieSupport = false;\n  }\n  // All webkit & gecko engine instances use itp (intelligent tracking prevention -\n  // https://webkit.org/tracking-prevention/#intelligent-tracking-prevention-itp)\n  if (browserInfo.engine.name === Bowser.ENGINE_MAP.WebKit || browserInfo.engine.name === Bowser.ENGINE_MAP.Gecko) {\n    thirdPartyCookieSupport = false;\n  }\n\n  return thirdPartyCookieSupport;\n}\n\nexport const validateAndConstructUrl = (domain: string): URL => {\n  try {\n    const url = new URL(decodeURIComponent(domain));\n    return url;\n  } catch (error: unknown) {\n    throw new Error(`${(error as Error)?.message || \"\"}, Note: Your jwt domain: (i.e ${domain}) must have http:// or https:// prefix`);\n  }\n};\n\nexport function isMobileOrTablet(): boolean {\n  const browser = Bowser.getParser(navigator.userAgent);\n  const platform = browser.getPlatform();\n  return platform.type === Bowser.PLATFORMS_MAP.tablet || platform.type === Bowser.PLATFORMS_MAP.mobile;\n}\n\nexport function getTimeout(typeOfLogin: LOGIN_TYPE) {\n  if ((typeOfLogin === LOGIN.FACEBOOK || typeOfLogin === LOGIN.LINE) && isMobileOrTablet()) {\n    return 1000 * 60; // 60 seconds to finish the login\n  }\n  return 1000 * 10; // 10 seconds\n}\n","import { EventEmitter } from \"events\";\n\nimport { getPopupFeatures } from \"./helpers\";\n\nclass PopupHandler extends EventEmitter {\n  url: URL;\n\n  target: string;\n\n  features: string;\n\n  window: Window;\n\n  windowTimer: number;\n\n  iClosedWindow: boolean;\n\n  timeout: number;\n\n  constructor({ url, target, features, timeout = 30000 }: { url: URL; target?: string; features?: string; timeout?: number }) {\n    super();\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures();\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this.timeout = timeout;\n    this._setupTimer();\n  }\n\n  _setupTimer(): void {\n    this.windowTimer = Number(\n      setInterval(() => {\n        if (this.window && this.window.closed) {\n          clearInterval(this.windowTimer);\n          setTimeout(() => {\n            if (!this.iClosedWindow) {\n              this.emit(\"close\");\n            }\n            this.iClosedWindow = false;\n            this.window = undefined;\n          }, this.timeout);\n        }\n        if (this.window === undefined) clearInterval(this.windowTimer);\n      }, 500)\n    );\n  }\n\n  open(): Promise<void> {\n    this.window = window.open(this.url.href, this.target, this.features);\n    if (!this.window) throw new Error(\"popup window is blocked\");\n    if (this.window?.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close(): void {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect: boolean): void {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n}\n\nexport default PopupHandler;\n","import base64url from \"base64url\";\n\nimport { LOGIN_TYPE, UX_MODE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { broadcastChannelOptions, getTimeout, randomId } from \"../utils/helpers\";\nimport log from \"../utils/loglevel\";\nimport PopupHandler from \"../utils/PopupHandler\";\nimport { Auth0ClientOptions, ILoginHandler, LoginWindowResponse, PopupResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nabstract class AbstractLoginHandler implements ILoginHandler {\n  public nonce: string = randomId();\n\n  public finalURL: URL;\n\n  // Not using object constructor because of this issue\n  // https://github.com/microsoft/TypeScript/issues/5326\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {}\n\n  get state(): string {\n    return encodeURIComponent(\n      base64url.encode(\n        JSON.stringify({\n          ...(this.customState || {}),\n          instanceId: this.nonce,\n          verifier: this.verifier,\n          typeOfLogin: this.typeOfLogin,\n          redirectToOpener: this.redirectToOpener || false,\n        })\n      )\n    );\n  }\n\n  async handleLoginWindow(params: { locationReplaceOnRedirect?: boolean; popupFeatures?: string }): Promise<LoginWindowResponse> {\n    const verifierWindow = new PopupHandler({ url: this.finalURL, features: params.popupFeatures, timeout: getTimeout(this.typeOfLogin) });\n    if (this.uxMode === UX_MODE.REDIRECT) {\n      verifierWindow.redirect(params.locationReplaceOnRedirect);\n    } else {\n      const { BroadcastChannel } = await import(\"@toruslabs/broadcast-channel\");\n      return new Promise<LoginWindowResponse>((resolve, reject) => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let bc: any;\n        const handleData = async (ev: { error: string; data: PopupResponse }) => {\n          try {\n            const { error, data } = ev;\n            const {\n              instanceParams,\n              hashParams: { access_token: accessToken, id_token: idToken, ...rest },\n            } = data || {};\n            if (error) {\n              log.error(ev);\n              reject(new Error(`Error: ${error}. Info: ${JSON.stringify(ev.data || {})}`));\n              return;\n            }\n            if (ev.data && instanceParams.verifier === this.verifier) {\n              log.info(ev.data);\n              if (!this.redirectToOpener && bc) await bc.postMessage({ success: true });\n              resolve({\n                accessToken,\n                idToken: idToken || \"\",\n                ...rest,\n                // State has to be last here otherwise it will be overwritten\n                state: instanceParams,\n              });\n            }\n          } catch (error) {\n            log.error(error);\n            reject(error);\n          }\n        };\n\n        if (!this.redirectToOpener) {\n          bc = new BroadcastChannel<{\n            error: string;\n            data: PopupResponse;\n          }>(`redirect_channel_${this.nonce}`, broadcastChannelOptions);\n          bc.addEventListener(\"message\", async (ev: { error: string; data: PopupResponse }) => {\n            await handleData(ev);\n            bc.close();\n            verifierWindow.close();\n          });\n        } else {\n          const postMessageEventHandler = async (postMessageEvent: MessageEvent) => {\n            if (!postMessageEvent.data) return;\n            const ev = postMessageEvent.data;\n            if (ev.channel !== `redirect_channel_${this.nonce}`) return;\n            window.removeEventListener(\"message\", postMessageEventHandler);\n            handleData(ev);\n            verifierWindow.close();\n          };\n          window.addEventListener(\"message\", postMessageEventHandler);\n        }\n        try {\n          verifierWindow.open();\n        } catch (error) {\n          log.error(error);\n          reject(error);\n          return;\n        }\n        verifierWindow.once(\"close\", () => {\n          if (bc) bc.close();\n          reject(new Error(\"user closed popup\"));\n        });\n      });\n    }\n    return null;\n  }\n\n  abstract getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse>;\n\n  abstract setFinalUrl(): void;\n}\n\nexport default AbstractLoginHandler;\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class DiscordHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"identify email\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://discord.com/api/oauth2/authorize\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ id: string; username: string; discriminator: string; avatar?: string; email?: string }>(\n      \"https://discord.com/api/users/@me\",\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      }\n    );\n    const { id, avatar, email = \"\", username: name = \"\", discriminator = \"\" } = userInfo;\n    const profileImage =\n      avatar === null\n        ? `https://cdn.discordapp.com/embed/avatars/${Number(discriminator) % 5}.png`\n        : `https://cdn.discordapp.com/avatars/${id}/${avatar}.png?size=2048`;\n    return {\n      profileImage,\n      name: `${name}#${discriminator}`,\n      email,\n      verifierId: id,\n      verifier: this.verifier,\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class FacebookHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"public_profile email\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://www.facebook.com/v15.0/dialog/oauth\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ name: string; id: string; picture: { data: { url?: string } }; email?: string }>(\n      \"https://graph.facebook.com/me?fields=name,email,picture.type(large)\",\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      }\n    );\n    const { name = \"\", id, picture, email = \"\" } = userInfo;\n    return {\n      email,\n      name,\n      profileImage: picture.data.url || \"\",\n      verifier: this.verifier,\n      verifierId: id,\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class GoogleHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token id_token\";\n\n  private readonly SCOPE: string = \"profile email openid\";\n\n  private readonly PROMPT: string = \"consent select_account\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://accounts.google.com/o/oauth2/v2/auth\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        prompt: this.PROMPT,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n        nonce: this.nonce,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ picture: string; email: string; name: string }>(\"https://www.googleapis.com/userinfo/v2/me\", {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n    const { picture: profileImage = \"\", email = \"\", name = \"\" } = userInfo;\n    return {\n      email,\n      name,\n      profileImage,\n      verifier: this.verifier,\n      verifierId: email.toLowerCase(),\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport { jwtDecode } from \"jwt-decode\";\nimport deepmerge from \"lodash.merge\";\nimport log from \"loglevel\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { getVerifierId, loginToConnectionMap, padUrlString, validateAndConstructUrl } from \"../utils/helpers\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport {\n  AUTH0_JWT_LOGIN_TYPE,\n  Auth0ClientOptions,\n  Auth0UserInfo,\n  LoginWindowResponse,\n  TorusGenericObject,\n  TorusVerifierResponse,\n} from \"./interfaces\";\n\nexport default class JwtHandler extends AbstractLoginHandler {\n  private readonly SCOPE: string = \"openid profile email\";\n\n  private readonly RESPONSE_TYPE: string = \"token id_token\";\n\n  private readonly PROMPT: string = \"login\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const { domain } = this.jwtParams;\n    const finalUrl = validateAndConstructUrl(domain);\n    finalUrl.pathname += finalUrl.pathname.endsWith(\"/\") ? \"authorize\" : \"/authorize\";\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams));\n    delete clonedParams.domain;\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        prompt: this.PROMPT,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n        connection: loginToConnectionMap[this.typeOfLogin as AUTH0_JWT_LOGIN_TYPE],\n        nonce: this.nonce,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, accessToken } = params;\n    const { domain, verifierIdField, isVerifierIdCaseSensitive, user_info_route = \"userinfo\" } = this.jwtParams;\n    if (accessToken) {\n      try {\n        const domainUrl = new URL(domain);\n        const userInfo = await get<Auth0UserInfo>(`${padUrlString(domainUrl)}${user_info_route}`, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        });\n        const { picture, name, email } = userInfo;\n        return {\n          email,\n          name,\n          profileImage: picture,\n          verifierId: getVerifierId(userInfo, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n          verifier: this.verifier,\n          typeOfLogin: this.typeOfLogin,\n        };\n      } catch (error) {\n        // ignore\n        log.warn(error, \"Unable to get userinfo from endpoint\");\n      }\n    }\n    if (idToken) {\n      const decodedToken = jwtDecode<Auth0UserInfo>(idToken);\n      const { name, email, picture } = decodedToken;\n      return {\n        profileImage: picture,\n        name,\n        email,\n        verifierId: getVerifierId(decodedToken, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    }\n    throw new Error(\"Access/id token not available\");\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport { jwtDecode } from \"jwt-decode\";\nimport deepmerge from \"lodash.merge\";\nimport log from \"loglevel\";\n\nimport { LOGIN_TYPE, UX_MODE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { constructURL, getVerifierId, padUrlString } from \"../utils/helpers\";\nimport PopupHandler from \"../utils/PopupHandler\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, Auth0UserInfo, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class MockLoginHandler extends AbstractLoginHandler {\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams));\n    delete clonedParams.domain;\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        client_id: this.clientId,\n        nonce: this.nonce,\n      },\n      clonedParams\n    );\n\n    this.finalURL = new URL(constructURL({ baseURL: this.redirect_uri, query: null, hash: finalJwtParams }));\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, accessToken } = params;\n    const { domain, verifierIdField, isVerifierIdCaseSensitive, user_info_route = \"userinfo\" } = this.jwtParams;\n    if (accessToken) {\n      try {\n        const domainUrl = new URL(domain);\n        const userInfo = await get<Auth0UserInfo>(`${padUrlString(domainUrl)}${user_info_route}`, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        });\n        const { picture, name, email } = userInfo;\n        return {\n          email,\n          name,\n          profileImage: picture,\n          verifierId: getVerifierId(userInfo, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n          verifier: this.verifier,\n          typeOfLogin: this.typeOfLogin,\n        };\n      } catch (error) {\n        // ignore\n        log.warn(error, \"Unable to get userinfo from endpoint\");\n      }\n    }\n    if (idToken) {\n      const decodedToken = jwtDecode<Auth0UserInfo>(idToken);\n      const { name, email, picture } = decodedToken;\n      return {\n        profileImage: picture,\n        name,\n        email,\n        verifierId: getVerifierId(decodedToken, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    }\n    throw new Error(\"Access/id token not available\");\n  }\n\n  handleLoginWindow(params: { locationReplaceOnRedirect?: boolean; popupFeatures?: string }): Promise<LoginWindowResponse> {\n    const { id_token: idToken, access_token: accessToken } = this.jwtParams;\n    const verifierWindow = new PopupHandler({ url: this.finalURL, features: params.popupFeatures });\n    if (this.uxMode === UX_MODE.REDIRECT) {\n      verifierWindow.redirect(params.locationReplaceOnRedirect);\n    } else {\n      return Promise.resolve({\n        state: {},\n        idToken,\n        accessToken,\n      });\n    }\n    return null;\n  }\n}\n","import { get, post } from \"@toruslabs/http-helpers\";\nimport { jwtDecode } from \"jwt-decode\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { broadcastChannelOptions, getVerifierId, padUrlString, validateAndConstructUrl } from \"../utils/helpers\";\nimport log from \"../utils/loglevel\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, Auth0UserInfo, LoginWindowResponse, PopupResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class JwtHandler extends AbstractLoginHandler {\n  private readonly SCOPE: string = \"openid profile email\";\n\n  private readonly RESPONSE_TYPE: string = \"token id_token\";\n\n  private readonly PROMPT: string = \"login\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const { domain } = this.jwtParams;\n    const domainUrl = validateAndConstructUrl(domain);\n\n    domainUrl.pathname = \"/passwordless/start\";\n    this.finalURL = domainUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, accessToken } = params;\n    const { domain, verifierIdField, isVerifierIdCaseSensitive } = this.jwtParams;\n    try {\n      const domainUrl = new URL(domain);\n      const userInfo = await get<Auth0UserInfo>(`${padUrlString(domainUrl)}userinfo`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      });\n      const { picture, name, email } = userInfo;\n      return {\n        email,\n        name,\n        profileImage: picture,\n        verifierId: getVerifierId(userInfo, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    } catch (error) {\n      log.error(error);\n      const decodedToken = jwtDecode(idToken) as Auth0UserInfo;\n      const { name, email, picture } = decodedToken;\n      return {\n        profileImage: picture,\n        name,\n        email,\n        verifierId: getVerifierId(decodedToken, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    }\n  }\n\n  async handleLoginWindow(): Promise<LoginWindowResponse> {\n    const { BroadcastChannel } = await import(\"@toruslabs/broadcast-channel\");\n    return new Promise<LoginWindowResponse>((resolve, reject) => {\n      if (this.redirectToOpener) {\n        reject(new Error(\"Cannot use redirect to opener for passwordless\"));\n        return;\n      }\n      const handleData = (ev: { error: string; data: PopupResponse }) => {\n        try {\n          const { error, data } = ev;\n          const {\n            instanceParams,\n            hashParams: { access_token: accessToken, id_token: idToken, ...rest },\n          } = data || {};\n          if (error) {\n            log.error(ev.error);\n            reject(new Error(error));\n            return;\n          }\n          if (ev.data && instanceParams.verifier === this.verifier) {\n            log.info(ev.data);\n            resolve({ accessToken, idToken: idToken || \"\", ...rest, state: instanceParams });\n          }\n        } catch (error) {\n          log.error(error);\n          reject(error);\n        }\n      };\n      const bc = new BroadcastChannel<{\n        error: string;\n        data: PopupResponse;\n      }>(`redirect_channel_${this.nonce}`, broadcastChannelOptions);\n      bc.addEventListener(\"message\", async (ev) => {\n        handleData(ev);\n        bc.close();\n      });\n      try {\n        const { connection = \"email\", login_hint } = this.jwtParams;\n        const finalJwtParams = deepmerge(\n          {\n            client_id: this.clientId,\n            connection,\n            email: connection === \"email\" ? login_hint : undefined,\n            phone_number: connection === \"sms\" ? login_hint : undefined,\n            send: \"link\",\n            authParams: {\n              scope: this.SCOPE,\n              state: this.state,\n              response_type: this.RESPONSE_TYPE,\n              redirect_uri: this.redirect_uri,\n              nonce: this.nonce,\n              prompt: this.PROMPT,\n            },\n          },\n          {\n            authParams: this.jwtParams,\n          }\n        );\n        // using stringify and parse to remove undefined params\n        // This method is only resolved when the user clicks the email link\n        post(this.finalURL.href, JSON.parse(JSON.stringify(finalJwtParams)))\n          .then((response) => {\n            log.info(\"posted\", response);\n            return undefined;\n          })\n          .catch((error) => {\n            log.error(error);\n            reject(error);\n          });\n      } catch (error) {\n        log.error(error);\n        reject(error);\n      }\n    });\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class RedditHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"identity\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(`https://www.reddit.com/api/v1/authorize${window.innerWidth < 600 ? \".compact\" : \"\"}`);\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ icon_img: string; name: string }>(\"https://oauth.reddit.com/api/v1/me\", {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n    const { icon_img: profileImage = \"\", name = \"\" } = userInfo;\n    return {\n      email: \"\",\n      name,\n      profileImage: profileImage.split(\"?\").length > 0 ? profileImage.split(\"?\")[0] : profileImage,\n      verifier: this.verifier,\n      verifierId: name.toLowerCase(),\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class TwitchHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"user:read:email\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://id.twitch.tv/oauth2/authorize\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n        force_verify: true,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ data: [{ profile_image_url: string; display_name: string; email: string; id: string }] }>(\n      \"https://api.twitch.tv/helix/users\",\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Client-ID\": this.clientId,\n        },\n      }\n    );\n    const [{ profile_image_url: profileImage = \"\", display_name: name = \"\", email = \"\", id: verifierId }] = userInfo.data || [];\n    return {\n      profileImage,\n      name,\n      email,\n      verifierId,\n      verifier: this.verifier,\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport base64url from \"base64url\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport log from \"../utils/loglevel\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse, WebAuthnExtraParams } from \"./interfaces\";\n\nconst WEBAUTHN_LOOKUP_SERVER = \"https://api.webauthn.openlogin.com\";\n\nexport default class WebAuthnHandler extends AbstractLoginHandler {\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject,\n    readonly registerOnly?: boolean\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const { webauthnURL } = this.customState || {};\n    const finalUrl = webauthnURL ? new URL(webauthnURL) : new URL(\"https://webauthn.openlogin.com\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        register_only: !!this.registerOnly,\n        state: this.state,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(parameters: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, ref, extraParamsPassed, extraParams } = parameters;\n    let verifierId: string;\n    let signature: string;\n    let clientDataJSON: string;\n    let authenticatorData: string;\n    let publicKey: string;\n    let challenge: string;\n    let rpOrigin: string;\n    let credId: string;\n    let transports: AuthenticatorTransport[];\n\n    if (extraParamsPassed === \"true\") {\n      log.debug(\"extraParamsPassed is true, using extraParams passed through hashParams\");\n      try {\n        ({\n          verifier_id: verifierId,\n          signature,\n          clientDataJSON,\n          authenticatorData,\n          publicKey,\n          challenge,\n          rpOrigin,\n          credId,\n          transports,\n        } = JSON.parse(base64url.decode(extraParams)));\n      } catch (error) {\n        log.warn(\"unable to parse extraParams\", error);\n        ({\n          verifier_id: verifierId,\n          signature,\n          clientDataJSON,\n          authenticatorData,\n          publicKey,\n          challenge,\n          rpOrigin,\n          credId,\n          transports,\n        } = await get<WebAuthnExtraParams & { verifier_id: string }>(`${WEBAUTHN_LOOKUP_SERVER}/signature/fetch/${idToken}`));\n      }\n    } else {\n      log.debug(\"extraParamsPassed is false, using extraParams passed through bridge server\");\n      ({\n        verifier_id: verifierId,\n        signature,\n        clientDataJSON,\n        authenticatorData,\n        publicKey,\n        challenge,\n        rpOrigin,\n        credId,\n        transports,\n      } = await get<WebAuthnExtraParams & { verifier_id: string }>(`${WEBAUTHN_LOOKUP_SERVER}/signature/fetch/${idToken}`));\n    }\n\n    if (signature !== idToken) {\n      throw new Error(\"idtoken should be equal to signature\");\n    }\n\n    return {\n      email: \"\",\n      name: \"WebAuthn Login\",\n      profileImage: \"\",\n      verifier: this.verifier,\n      verifierId,\n      typeOfLogin: this.typeOfLogin,\n      ref,\n      registerOnly: this.registerOnly,\n      extraVerifierParams: {\n        signature,\n        clientDataJSON,\n        authenticatorData,\n        publicKey,\n        challenge,\n        rpOrigin,\n        credId,\n        transports,\n      },\n    };\n  }\n}\n","import { LOGIN } from \"../utils/enums\";\nimport DiscordHandler from \"./DiscordHandler\";\nimport FacebookHandler from \"./FacebookHandler\";\nimport GoogleHandler from \"./GoogleHandler\";\nimport { CreateHandlerParams, ILoginHandler } from \"./interfaces\";\nimport JwtHandler from \"./JwtHandler\";\nimport MockLoginHandler from \"./MockLoginHandler\";\nimport PasswordlessHandler from \"./PasswordlessHandler\";\nimport RedditHandler from \"./RedditHandler\";\nimport TwitchHandler from \"./TwitchHandler\";\nimport WebAuthnHandler from \"./WebAuthnHandler\";\n\nconst createHandler = ({\n  clientId,\n  redirect_uri,\n  typeOfLogin,\n  verifier,\n  jwtParams,\n  redirectToOpener,\n  uxMode,\n  customState,\n  registerOnly,\n}: CreateHandlerParams): ILoginHandler => {\n  if (!verifier || !typeOfLogin || !clientId) {\n    throw new Error(\"Invalid params\");\n  }\n  const { domain, login_hint, id_token, access_token } = jwtParams || {};\n  switch (typeOfLogin) {\n    case LOGIN.GOOGLE:\n      return new GoogleHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.FACEBOOK:\n      return new FacebookHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.TWITCH:\n      return new TwitchHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.REDDIT:\n      return new RedditHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.DISCORD:\n      return new DiscordHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.PASSWORDLESS:\n      if (!domain || !login_hint) throw new Error(\"Invalid params\");\n      return new PasswordlessHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.APPLE:\n    case LOGIN.GITHUB:\n    case LOGIN.LINKEDIN:\n    case LOGIN.TWITTER:\n    case LOGIN.WEIBO:\n    case LOGIN.LINE:\n    case LOGIN.EMAIL_PASSWORD:\n    case LOGIN.JWT:\n      if (id_token || access_token) {\n        return new MockLoginHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n      }\n      if (!domain) throw new Error(\"Invalid params\");\n      return new JwtHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.WEBAUTHN:\n      return new WebAuthnHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState, registerOnly);\n    default:\n      throw new Error(\"Invalid login type\");\n  }\n};\n\nexport default createHandler;\n","import { register } from \"@chaitanyapotti/register-service-worker\";\n\nimport log from \"./utils/loglevel\";\n\nexport const registerServiceWorker = (baseUrl: string) =>\n  new Promise((resolve, reject) => {\n    const swUrl = `${baseUrl}sw.js`;\n\n    if (\"serviceWorker\" in window.navigator) {\n      // if swIntegrity is not calculated\n      register(swUrl, {\n        ready() {\n          log.info(\"App is being served from cache by a service worker.\\n For more details, visit https://goo.gl/AFskqB\");\n          resolve(undefined);\n        },\n        registered() {\n          log.info(\"Service worker has been registered.\");\n          resolve(undefined);\n        },\n        cached() {\n          log.info(\"Content has been cached for offline use.\");\n          resolve(undefined);\n        },\n        updatefound() {\n          log.info(\"New content is downloading.\");\n        },\n        updated() {\n          log.info(\"New content is available; please refresh.\");\n        },\n        offline() {\n          log.info(\"No internet connection found. App is running in offline mode.\");\n          reject(new Error(\"App is offline\"));\n        },\n        error(error) {\n          log.error(\"Error during service worker registration:\", error);\n          reject(error);\n        },\n      });\n    } else {\n      reject(new Error(\"Service workers are not supported\"));\n    }\n  });\n","import type { Transaction, TransactionContext } from \"@sentry/types\";\n\nexport interface Sentry {\n  startTransaction(_: TransactionContext): Transaction;\n}\nexport default class SentryHandler {\n  sentry: Sentry | null = null;\n\n  constructor(sentry?: Sentry) {\n    this.sentry = sentry;\n  }\n\n  startTransaction(context: TransactionContext): Transaction | void {\n    if (this.sentry) {\n      return this.sentry.startTransaction(context);\n    }\n  }\n\n  finishTransaction(tx: void | Transaction): void {\n    if (tx) {\n      tx.finish();\n    }\n  }\n}\n","import { getPublic, sign } from \"@toruslabs/eccrypto\";\nimport { get, post } from \"@toruslabs/http-helpers\";\nimport { decryptData, encryptData, keccak256 } from \"@toruslabs/metadata-helpers\";\n\nimport { LoginDetails } from \"../handlers/interfaces\";\nimport { REDIRECT_PARAMS_STORAGE_METHOD, REDIRECT_PARAMS_STORAGE_METHOD_TYPE } from \"./enums\";\nimport { are3PCSupported, storageAvailable } from \"./helpers\";\nimport log from \"./loglevel\";\n\nclass StorageHelper {\n  private currentStorageMethod: REDIRECT_PARAMS_STORAGE_METHOD_TYPE = REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE;\n\n  private isInitialized = false;\n\n  private storageServerUrl = \"https://broadcast-server.tor.us\";\n\n  constructor(serverUrl: string) {\n    this.storageServerUrl = serverUrl;\n  }\n\n  init() {\n    const support = are3PCSupported();\n    const localStorageAvailable = storageAvailable(REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE);\n    if (support && localStorageAvailable) {\n      // use local storage as default for storing stuff\n      this.currentStorageMethod = REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE;\n    } else {\n      // use server store as default for storing stuff\n      this.currentStorageMethod = REDIRECT_PARAMS_STORAGE_METHOD.SERVER;\n    }\n    this.isInitialized = true;\n  }\n\n  async storeLoginDetails(params: LoginDetails, scope: string): Promise<void> {\n    if (!this.isInitialized) throw new Error(\"StorageHelper is not initialized\");\n    if (this.currentStorageMethod === REDIRECT_PARAMS_STORAGE_METHOD.SERVER) {\n      const privKey = keccak256(Buffer.from(scope, \"utf8\"));\n      const privKeyHex = privKey.toString(\"hex\");\n      const publicKeyHex = getPublic(privKey).toString(\"hex\");\n      const encData = await encryptData(privKeyHex, params);\n      const signature = (await sign(privKey, keccak256(Buffer.from(encData, \"utf8\")))).toString(\"hex\");\n      await post(`${this.storageServerUrl}/store/set`, { key: publicKeyHex, data: encData, signature });\n    } else {\n      window.localStorage.setItem(`torus_login_${scope}`, JSON.stringify(params));\n    }\n  }\n\n  async retrieveLoginDetails(scope: string): Promise<LoginDetails> {\n    if (!this.isInitialized) throw new Error(\"StorageHelper is not initialized\");\n    if (this.currentStorageMethod === REDIRECT_PARAMS_STORAGE_METHOD.SERVER) {\n      const privKey = keccak256(Buffer.from(scope, \"utf8\"));\n      const privKeyHex = privKey.toString(\"hex\");\n      const publicKeyHex = getPublic(privKey).toString(\"hex\");\n      try {\n        const encData: { message: string; success: boolean } = await get(`${this.storageServerUrl}/store/get?key=${publicKeyHex}`);\n        if (encData.message) {\n          const loginDetails = await decryptData<LoginDetails>(privKeyHex, encData.message);\n          return loginDetails;\n        }\n      } catch (error) {\n        if ((error as Response).status === 404) {\n          log.warn(error, \"Session likely expired\");\n        } else {\n          throw error;\n        }\n      }\n    }\n    const loginDetails = window.localStorage.getItem(`torus_login_${scope}`);\n    return JSON.parse(loginDetails || \"{}\") as LoginDetails;\n  }\n\n  clearLoginDetailsStorage(scope: string): void {\n    if (!this.isInitialized) throw new Error(\"StorageHelper is not initialized\");\n    if (this.currentStorageMethod === REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE) {\n      window.localStorage.removeItem(`torus_login_${scope}`);\n    }\n    // No need to clear server details cause they auto expire and scope is never re-used for different login attempts\n  }\n\n  clearOrphanedLoginDetails(): void {\n    if (!this.isInitialized) throw new Error(\"StorageHelper is not initialized\");\n    if (this.currentStorageMethod === REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE) {\n      const allStorageKeys = Object.keys(window.localStorage);\n      allStorageKeys.forEach((key) => {\n        if (key.startsWith(\"torus_login_\")) {\n          window.localStorage.removeItem(key);\n        }\n      });\n    }\n    // No need to clear server details cause they auto expire and scope is never re-used for different login attempts\n  }\n}\n\nexport default StorageHelper;\n","import { NodeDetailManager } from \"@toruslabs/fetch-node-details\";\nimport Torus, { keccak256, TorusKey } from \"@toruslabs/torus.js\";\n\nimport createHandler from \"./handlers/HandlerFactory\";\nimport {\n  AggregateLoginParams,\n  AggregateVerifierParams,\n  CustomAuthArgs,\n  ExtraParams,\n  HybridAggregateLoginParams,\n  ILoginHandler,\n  InitParams,\n  LoginWindowResponse,\n  RedirectResult,\n  RedirectResultParams,\n  SingleLoginParams,\n  SubVerifierDetails,\n  TorusAggregateLoginResponse,\n  TorusHybridAggregateLoginResponse,\n  TorusLoginResponse,\n  TorusSubVerifierInfo,\n  TorusVerifierResponse,\n} from \"./handlers/interfaces\";\nimport { registerServiceWorker } from \"./registerServiceWorker\";\nimport SentryHandler from \"./sentry\";\nimport { AGGREGATE_VERIFIER, LOGIN, SENTRY_TXNS, TORUS_METHOD, UX_MODE, UX_MODE_TYPE } from \"./utils/enums\";\nimport { handleRedirectParameters, isFirefox, padUrlString } from \"./utils/helpers\";\nimport log from \"./utils/loglevel\";\nimport StorageHelper from \"./utils/StorageHelper\";\n\nclass CustomAuth {\n  isInitialized: boolean;\n\n  config: {\n    baseUrl: string;\n    redirectToOpener: boolean;\n    redirect_uri: string;\n    uxMode: UX_MODE_TYPE;\n    locationReplaceOnRedirect: boolean;\n    popupFeatures: string;\n  };\n\n  torus: Torus;\n\n  nodeDetailManager: NodeDetailManager;\n\n  storageHelper: StorageHelper;\n\n  sentryHandler: SentryHandler;\n\n  constructor({\n    baseUrl,\n    network,\n    enableLogging = false,\n    redirectToOpener = false,\n    redirectPathName = \"redirect\",\n    apiKey = \"torus-default\",\n    uxMode = UX_MODE.POPUP,\n    locationReplaceOnRedirect = false,\n    popupFeatures,\n    storageServerUrl = \"https://broadcast-server.tor.us\",\n    sentry,\n    enableOneKey = false,\n    web3AuthClientId,\n    metadataUrl = \"https://metadata.tor.us\",\n  }: CustomAuthArgs) {\n    if (!web3AuthClientId) throw new Error(\"Please provide a valid web3AuthClientId in constructor\");\n    if (!network) throw new Error(\"Please provide a valid network in constructor\");\n    this.isInitialized = false;\n    const baseUri = new URL(baseUrl);\n    this.config = {\n      baseUrl: padUrlString(baseUri),\n      get redirect_uri() {\n        return `${this.baseUrl}${redirectPathName}`;\n      },\n      redirectToOpener,\n      uxMode,\n      locationReplaceOnRedirect,\n      popupFeatures,\n    };\n    const torus = new Torus({\n      network,\n      clientId: web3AuthClientId,\n      enableOneKey,\n      legacyMetadataHost: metadataUrl,\n    });\n    Torus.setAPIKey(apiKey);\n    this.torus = torus;\n    this.nodeDetailManager = new NodeDetailManager({ network });\n    if (enableLogging) log.enableAll();\n    else log.disableAll();\n    this.storageHelper = new StorageHelper(storageServerUrl);\n    this.sentryHandler = new SentryHandler(sentry);\n  }\n\n  async init({ skipSw = false, skipInit = false, skipPrefetch = false }: InitParams = {}): Promise<void> {\n    this.storageHelper.init();\n    if (skipInit) {\n      this.isInitialized = true;\n      return;\n    }\n    if (!skipSw) {\n      const fetchSwResponse = await fetch(`${this.config.baseUrl}sw.js`, { cache: \"reload\" });\n      if (fetchSwResponse.ok) {\n        try {\n          await registerServiceWorker(this.config.baseUrl);\n          this.isInitialized = true;\n          return;\n        } catch (error) {\n          log.warn(error);\n        }\n      } else {\n        throw new Error(\"Service worker is not being served. Please serve it\");\n      }\n    }\n    if (!skipPrefetch) {\n      // Skip the redirect check for firefox\n      if (isFirefox()) {\n        this.isInitialized = true;\n        return;\n      }\n      await this.handlePrefetchRedirectUri();\n      return;\n    }\n    this.isInitialized = true;\n  }\n\n  async triggerLogin(args: SingleLoginParams): Promise<TorusLoginResponse> {\n    const { verifier, verifierID, idToken, accessToken, typeOfLogin, clientId, jwtParams, customState, registerOnly } = args;\n    log.info(\"Verifier: \", verifier);\n    if (!this.isInitialized) {\n      throw new Error(\"Not initialized yet\");\n    }\n    if (registerOnly && typeOfLogin !== LOGIN.WEBAUTHN) throw new Error(\"registerOnly flag can only be passed for webauthn\");\n    const loginHandler: ILoginHandler = createHandler({\n      typeOfLogin,\n      clientId,\n      verifier,\n      redirect_uri: this.config.redirect_uri,\n      redirectToOpener: this.config.redirectToOpener,\n      jwtParams,\n      uxMode: this.config.uxMode,\n      customState,\n      registerOnly,\n    });\n    this.storageHelper.clearOrphanedLoginDetails();\n    if (this.config.uxMode === UX_MODE.REDIRECT) {\n      await this.storageHelper.storeLoginDetails({ method: TORUS_METHOD.TRIGGER_LOGIN, args }, loginHandler.nonce);\n    }\n    if (this.config.uxMode === UX_MODE.REDIRECT) return null;\n    if (registerOnly) {\n      const nodeTx = this.sentryHandler.startTransaction({\n        name: SENTRY_TXNS.FETCH_NODE_DETAILS,\n      });\n      const nodeDetails = await this.nodeDetailManager.getNodeDetails({ verifier, verifierId: verifierID });\n\n      this.sentryHandler.finishTransaction(nodeTx);\n      const lookupTx = this.sentryHandler.startTransaction({\n        name: SENTRY_TXNS.PUB_ADDRESS_LOOKUP,\n      });\n      const torusPubKey = await this.torus.getPublicAddress(nodeDetails.torusNodeEndpoints, nodeDetails.torusNodePub, {\n        verifier,\n        verifierId: verifierID,\n      });\n      this.sentryHandler.finishTransaction(lookupTx);\n      return {\n        ...torusPubKey,\n        finalKeyData: { ...torusPubKey.finalKeyData, privKey: undefined },\n        oAuthKeyData: { ...torusPubKey.finalKeyData, privKey: undefined },\n        metadata: { ...torusPubKey.metadata, nonce: undefined },\n        sessionData: undefined,\n      };\n    }\n\n    const torusKey = await this.getTorusKey(verifier, verifierID, { verifier_id: verifierID }, idToken || accessToken);\n    return {\n      ...torusKey,\n    };\n  }\n\n  async triggerAggregateLogin(args: AggregateLoginParams): Promise<TorusAggregateLoginResponse> {\n    // This method shall break if any of the promises fail. This behaviour is intended\n    const { aggregateVerifierType, verifierIdentifier, subVerifierDetailsArray } = args;\n    if (!this.isInitialized) {\n      throw new Error(\"Not initialized yet\");\n    }\n    if (!aggregateVerifierType || !verifierIdentifier || !Array.isArray(subVerifierDetailsArray)) {\n      throw new Error(\"Invalid params\");\n    }\n    if (aggregateVerifierType === AGGREGATE_VERIFIER.SINGLE_VERIFIER_ID && subVerifierDetailsArray.length !== 1) {\n      throw new Error(\"Single id verifier can only have one sub verifier\");\n    }\n    const userInfoPromises: Promise<TorusVerifierResponse>[] = [];\n    const loginParamsArray: LoginWindowResponse[] = [];\n    for (const subVerifierDetail of subVerifierDetailsArray) {\n      const { clientId, typeOfLogin, verifier, jwtParams, hash, queryParameters, customState } = subVerifierDetail;\n      const loginHandler: ILoginHandler = createHandler({\n        typeOfLogin,\n        clientId,\n        verifier,\n        redirect_uri: this.config.redirect_uri,\n        redirectToOpener: this.config.redirectToOpener,\n        jwtParams,\n        uxMode: this.config.uxMode,\n        customState,\n      });\n      // We let the user login to each verifier in a loop. Don't wait for key derivation here.!\n      let loginParams: LoginWindowResponse;\n      if (hash && queryParameters) {\n        const { error, hashParameters, instanceParameters } = handleRedirectParameters(hash, queryParameters);\n        if (error) throw new Error(error);\n        const { access_token: accessToken, id_token: idToken, ...rest } = hashParameters;\n        // State has to be last here otherwise it will be overwritten\n        loginParams = { accessToken, idToken, ...rest, state: instanceParameters };\n      } else {\n        this.storageHelper.clearOrphanedLoginDetails();\n        if (this.config.uxMode === UX_MODE.REDIRECT) {\n          await this.storageHelper.storeLoginDetails({ method: TORUS_METHOD.TRIGGER_AGGREGATE_LOGIN, args }, loginHandler.nonce);\n        }\n        loginParams = await loginHandler.handleLoginWindow({\n          locationReplaceOnRedirect: this.config.locationReplaceOnRedirect,\n          popupFeatures: this.config.popupFeatures,\n        });\n        if (this.config.uxMode === UX_MODE.REDIRECT) return null;\n      }\n      // Fail the method even if one promise fails\n\n      userInfoPromises.push(loginHandler.getUserInfo(loginParams));\n      loginParamsArray.push(loginParams);\n    }\n    const _userInfoArray = await Promise.all(userInfoPromises);\n    const userInfoArray = _userInfoArray.map((userInfo) => ({ ...userInfo, aggregateVerifier: verifierIdentifier }));\n    const aggregateVerifierParams: AggregateVerifierParams = { verify_params: [], sub_verifier_ids: [], verifier_id: \"\" };\n    const aggregateIdTokenSeeds = [];\n    let aggregateVerifierId = \"\";\n    let extraVerifierParams = {};\n    for (let index = 0; index < subVerifierDetailsArray.length; index += 1) {\n      const loginParams = loginParamsArray[index];\n      const { idToken, accessToken } = loginParams;\n      const userInfo = userInfoArray[index];\n      aggregateVerifierParams.verify_params.push({ verifier_id: userInfo.verifierId, idtoken: idToken || accessToken });\n      aggregateVerifierParams.sub_verifier_ids.push(userInfo.verifier);\n      aggregateIdTokenSeeds.push(idToken || accessToken);\n      aggregateVerifierId = userInfo.verifierId; // using last because idk\n      extraVerifierParams = userInfo.extraVerifierParams;\n    }\n    aggregateIdTokenSeeds.sort();\n    const aggregateIdToken = keccak256(Buffer.from(aggregateIdTokenSeeds.join(String.fromCharCode(29)), \"utf8\")).slice(2);\n    aggregateVerifierParams.verifier_id = aggregateVerifierId;\n    const torusKey = await this.getTorusKey(verifierIdentifier, aggregateVerifierId, aggregateVerifierParams, aggregateIdToken, extraVerifierParams);\n    return {\n      ...torusKey,\n      userInfo: userInfoArray.map((x, index) => ({ ...x, ...loginParamsArray[index] })),\n    };\n  }\n\n  async triggerHybridAggregateLogin(args: HybridAggregateLoginParams): Promise<TorusHybridAggregateLoginResponse> {\n    const { singleLogin, aggregateLoginParams } = args;\n    // This method shall break if any of the promises fail. This behaviour is intended\n    if (!this.isInitialized) {\n      throw new Error(\"Not initialized yet\");\n    }\n    if (\n      !aggregateLoginParams.aggregateVerifierType ||\n      !aggregateLoginParams.verifierIdentifier ||\n      !Array.isArray(aggregateLoginParams.subVerifierDetailsArray)\n    ) {\n      throw new Error(\"Invalid params\");\n    }\n    if (\n      aggregateLoginParams.aggregateVerifierType === AGGREGATE_VERIFIER.SINGLE_VERIFIER_ID &&\n      aggregateLoginParams.subVerifierDetailsArray.length !== 1\n    ) {\n      throw new Error(\"Single id verifier can only have one sub verifier\");\n    }\n    const { typeOfLogin, clientId, verifier, jwtParams, hash, queryParameters, customState } = singleLogin;\n    const loginHandler: ILoginHandler = createHandler({\n      typeOfLogin,\n      clientId,\n      verifier,\n      redirect_uri: this.config.redirect_uri,\n      redirectToOpener: this.config.redirectToOpener,\n      jwtParams,\n      uxMode: this.config.uxMode,\n      customState,\n    });\n    let loginParams: LoginWindowResponse;\n    if (hash && queryParameters) {\n      const { error, hashParameters, instanceParameters } = handleRedirectParameters(hash, queryParameters);\n      if (error) throw new Error(error);\n      const { access_token: accessToken, id_token: idToken, ...rest } = hashParameters;\n      // State has to be last here otherwise it will be overwritten\n      loginParams = { accessToken, idToken, ...rest, state: instanceParameters };\n    } else {\n      this.storageHelper.clearOrphanedLoginDetails();\n      if (this.config.uxMode === UX_MODE.REDIRECT) {\n        await this.storageHelper.storeLoginDetails({ method: TORUS_METHOD.TRIGGER_AGGREGATE_HYBRID_LOGIN, args }, loginHandler.nonce);\n      }\n      loginParams = await loginHandler.handleLoginWindow({\n        locationReplaceOnRedirect: this.config.locationReplaceOnRedirect,\n        popupFeatures: this.config.popupFeatures,\n      });\n      if (this.config.uxMode === UX_MODE.REDIRECT) return null;\n    }\n\n    const userInfo = await loginHandler.getUserInfo(loginParams);\n    const torusKey1Promise = this.getTorusKey(\n      verifier,\n      userInfo.verifierId,\n      { verifier_id: userInfo.verifierId },\n      loginParams.idToken || loginParams.accessToken,\n      userInfo.extraVerifierParams\n    );\n\n    const { verifierIdentifier, subVerifierDetailsArray } = aggregateLoginParams;\n    const aggregateVerifierParams: AggregateVerifierParams = { verify_params: [], sub_verifier_ids: [], verifier_id: \"\" };\n    const aggregateIdTokenSeeds = [];\n    let aggregateVerifierId = \"\";\n    for (let index = 0; index < subVerifierDetailsArray.length; index += 1) {\n      const sub = subVerifierDetailsArray[index];\n      const { idToken, accessToken } = loginParams;\n      aggregateVerifierParams.verify_params.push({ verifier_id: userInfo.verifierId, idtoken: idToken || accessToken });\n      aggregateVerifierParams.sub_verifier_ids.push(sub.verifier);\n      aggregateIdTokenSeeds.push(idToken || accessToken);\n      aggregateVerifierId = userInfo.verifierId; // using last because idk\n    }\n    aggregateIdTokenSeeds.sort();\n    const aggregateIdToken = keccak256(Buffer.from(aggregateIdTokenSeeds.join(String.fromCharCode(29)), \"utf8\")).slice(2);\n    aggregateVerifierParams.verifier_id = aggregateVerifierId;\n    const torusKey2Promise = this.getTorusKey(\n      verifierIdentifier,\n      aggregateVerifierId,\n      aggregateVerifierParams,\n      aggregateIdToken,\n      userInfo.extraVerifierParams\n    );\n    const [torusKey1, torusKey2] = await Promise.all([torusKey1Promise, torusKey2Promise]);\n    return {\n      singleLogin: {\n        ...torusKey1,\n      },\n      aggregateLogins: [torusKey2],\n    };\n  }\n\n  async getTorusKey(\n    verifier: string,\n    verifierId: string,\n    verifierParams: { verifier_id: string },\n    idToken: string,\n    additionalParams?: ExtraParams\n  ): Promise<TorusKey> {\n    const nodeTx = this.sentryHandler.startTransaction({\n      name: SENTRY_TXNS.FETCH_NODE_DETAILS,\n    });\n    const nodeDetails = await this.nodeDetailManager.getNodeDetails({ verifier, verifierId });\n    this.sentryHandler.finishTransaction(nodeTx);\n\n    if (this.torus.isLegacyNetwork) {\n      // Call getPublicAddress to do keyassign for legacy networks which are not migrated\n      const pubLookupTx = this.sentryHandler.startTransaction({\n        name: SENTRY_TXNS.PUB_ADDRESS_LOOKUP,\n      });\n      const address = await this.torus.getPublicAddress(nodeDetails.torusNodeEndpoints, nodeDetails.torusNodePub, { verifier, verifierId });\n      this.sentryHandler.finishTransaction(pubLookupTx);\n      log.debug(\"torus-direct/getTorusKey\", { getPublicAddress: address });\n    }\n\n    log.debug(\"torus-direct/getTorusKey\", { torusNodeEndpoints: nodeDetails.torusNodeEndpoints });\n\n    const sharesTx = this.sentryHandler.startTransaction({\n      name: SENTRY_TXNS.FETCH_SHARES,\n    });\n    const sharesResponse = await this.torus.retrieveShares(\n      nodeDetails.torusNodeEndpoints,\n      nodeDetails.torusIndexes,\n      verifier,\n      verifierParams,\n      idToken,\n      {\n        ...additionalParams,\n      }\n    );\n    this.sentryHandler.finishTransaction(sharesTx);\n    log.debug(\"torus-direct/getTorusKey\", { retrieveShares: sharesResponse });\n    return sharesResponse;\n  }\n\n  async getAggregateTorusKey(\n    verifier: string,\n    verifierId: string, // unique identifier for user e.g. sub on jwt\n    subVerifierInfoArray: TorusSubVerifierInfo[]\n  ): Promise<TorusKey> {\n    const aggregateVerifierParams: AggregateVerifierParams = { verify_params: [], sub_verifier_ids: [], verifier_id: \"\" };\n    const aggregateIdTokenSeeds = [];\n    let extraVerifierParams = {};\n    for (let index = 0; index < subVerifierInfoArray.length; index += 1) {\n      const userInfo = subVerifierInfoArray[index];\n      aggregateVerifierParams.verify_params.push({ verifier_id: verifierId, idtoken: userInfo.idToken });\n      aggregateVerifierParams.sub_verifier_ids.push(userInfo.verifier);\n      aggregateIdTokenSeeds.push(userInfo.idToken);\n      extraVerifierParams = userInfo.extraVerifierParams;\n    }\n    aggregateIdTokenSeeds.sort();\n    const aggregateIdToken = keccak256(Buffer.from(aggregateIdTokenSeeds.join(String.fromCharCode(29)), \"utf8\")).slice(2);\n    aggregateVerifierParams.verifier_id = verifierId;\n    return this.getTorusKey(verifier, verifierId, aggregateVerifierParams, aggregateIdToken, extraVerifierParams);\n  }\n\n  async getRedirectResult({ replaceUrl = true, clearLoginDetails = true }: RedirectResultParams = {}): Promise<RedirectResult> {\n    await this.init({ skipInit: true });\n    const url = new URL(window.location.href);\n    const hash = url.hash.substring(1);\n    const queryParams: Record<string, string> = {};\n    url.searchParams.forEach((value: string, key: string) => {\n      queryParams[key] = value;\n    });\n\n    if (replaceUrl) {\n      const cleanUrl = window.location.origin + window.location.pathname;\n      window.history.replaceState({ ...window.history.state, as: cleanUrl, url: cleanUrl }, \"\", cleanUrl);\n    }\n\n    if (!hash && Object.keys(queryParams).length === 0) {\n      throw new Error(\"Unable to fetch result from OAuth login\");\n    }\n\n    const { error, instanceParameters, hashParameters } = handleRedirectParameters(hash, queryParams);\n\n    const { instanceId } = instanceParameters;\n\n    log.info(instanceId, \"instanceId\");\n\n    const { args, method, ...rest } = await this.storageHelper.retrieveLoginDetails(instanceId);\n    log.info(args, method);\n\n    if (clearLoginDetails) {\n      this.storageHelper.clearLoginDetailsStorage(instanceId);\n    }\n\n    if (error) {\n      return { error, state: instanceParameters || {}, method, result: {}, hashParameters, args };\n    }\n\n    let result: unknown;\n\n    try {\n      if (method === TORUS_METHOD.TRIGGER_LOGIN) {\n        const methodArgs = args as SubVerifierDetails & { registerOnly?: boolean };\n        methodArgs.hash = hash;\n        methodArgs.queryParameters = queryParams;\n        result = await this.triggerLogin(methodArgs);\n      } else if (method === TORUS_METHOD.TRIGGER_AGGREGATE_LOGIN) {\n        const methodArgs = args as AggregateLoginParams;\n        methodArgs.subVerifierDetailsArray.forEach((x) => {\n          x.hash = hash;\n          x.queryParameters = queryParams;\n        });\n        result = await this.triggerAggregateLogin(methodArgs);\n      } else if (method === TORUS_METHOD.TRIGGER_AGGREGATE_HYBRID_LOGIN) {\n        const methodArgs = args as HybridAggregateLoginParams;\n        methodArgs.singleLogin.hash = hash;\n        methodArgs.singleLogin.queryParameters = queryParams;\n        result = await this.triggerHybridAggregateLogin(methodArgs);\n      }\n    } catch (err: unknown) {\n      log.error(err);\n      return {\n        error: `Could not get result from torus nodes \\n ${(err as Error)?.message || \"\"}`,\n        state: instanceParameters || {},\n        method,\n        result: {},\n        hashParameters,\n        args,\n        ...rest,\n      };\n    }\n\n    if (!result)\n      return {\n        error: \"Unsupported method type\",\n        state: instanceParameters || {},\n        method,\n        result: {},\n        hashParameters,\n        args,\n        ...rest,\n      };\n\n    return { method, result, state: instanceParameters || {}, hashParameters, args, ...rest };\n  }\n\n  private async handlePrefetchRedirectUri(): Promise<void> {\n    if (!document) return Promise.resolve();\n    return new Promise((resolve, reject) => {\n      const redirectHtml = document.createElement(\"link\");\n      redirectHtml.href = this.config.redirect_uri;\n      if (window.location.origin !== new URL(this.config.redirect_uri).origin) redirectHtml.crossOrigin = \"anonymous\";\n      redirectHtml.type = \"text/html\";\n      redirectHtml.rel = \"prefetch\";\n      const resolveFn = () => {\n        this.isInitialized = true;\n        resolve();\n      };\n      try {\n        if (redirectHtml.relList && redirectHtml.relList.supports) {\n          if (redirectHtml.relList.supports(\"prefetch\")) {\n            redirectHtml.onload = resolveFn;\n            redirectHtml.onerror = () => {\n              reject(new Error(`Please serve redirect.html present in serviceworker folder of this package on ${this.config.redirect_uri}`));\n            };\n            document.head.appendChild(redirectHtml);\n          } else {\n            // Link prefetch is not supported. pass through\n            resolveFn();\n          }\n        } else {\n          // Link prefetch is not detectable. pass through\n          resolveFn();\n        }\n      } catch (err) {\n        resolveFn();\n      }\n    });\n  }\n}\n\nexport default CustomAuth;\n"],"names":["LOGIN","GOOGLE","FACEBOOK","REDDIT","DISCORD","TWITCH","APPLE","GITHUB","LINKEDIN","TWITTER","WEIBO","LINE","EMAIL_PASSWORD","PASSWORDLESS","JWT","WEBAUTHN","AGGREGATE_VERIFIER","SINGLE_VERIFIER_ID","UX_MODE","POPUP","REDIRECT","REDIRECT_PARAMS_STORAGE_METHOD","LOCAL_STORAGE","SESSION_STORAGE","SERVER","TORUS_METHOD","TRIGGER_LOGIN","TRIGGER_AGGREGATE_LOGIN","TRIGGER_AGGREGATE_HYBRID_LOGIN","SENTRY_TXNS","FETCH_NODE_DETAILS","PUB_ADDRESS_LOOKUP","FETCH_SHARES","loglevel","getLogger","eventToPromise","emitter","Promise","resolve","reject","handler","ev","error","data","removeEventListener","Error","addEventListener","loginToConnectionMap","padUrlString","url","href","endsWith","randomId","Math","random","toString","slice","broadcastChannelOptions","webWorkerSupport","caseSensitiveField","field","isCaseSensitive","toLowerCase","getVerifierId","userInfo","typeOfLogin","verifierIdField","isVerifierIdCaseSensitive","arguments","length","undefined","name","sub","handleRedirectParameters","hash","queryParameters","hashParameters","split","reduce","result","item","part0","part1","log","info","instanceParameters","Object","keys","state","JSON","parse","base64url","decode","decodeURIComponent","error_description","storageAvailable","type","storage","window","x","setItem","removeItem","e","code","getPopupFeatures","dualScreenLeft","screenLeft","screenX","dualScreenTop","screenTop","screenY","w","h","width","innerWidth","document","documentElement","clientWidth","screen","height","innerHeight","clientHeight","systemZoom","left","abs","top","features","isFirefox","_window","navigator","userAgent","indexOf","constructURL","params","baseURL","query","URL","forEach","key","searchParams","append","are3PCSupported","_navigator","browserInfo","Bowser","stringify","thirdPartyCookieSupport","brave","engine","ENGINE_MAP","WebKit","Gecko","validateAndConstructUrl","domain","message","isMobileOrTablet","browser","getParser","platform","getPlatform","PLATFORMS_MAP","tablet","mobile","getTimeout","PopupHandler","EventEmitter","constructor","_ref","target","timeout","_defineProperty","windowTimer","iClosedWindow","_setupTimer","Number","setInterval","closed","clearInterval","setTimeout","emit","open","_this$window","focus","close","redirect","locationReplaceOnRedirect","location","replace","AbstractLoginHandler","clientId","verifier","redirect_uri","uxMode","redirectToOpener","jwtParams","customState","encodeURIComponent","encode","_objectSpread","instanceId","nonce","handleLoginWindow","verifierWindow","finalURL","popupFeatures","BroadcastChannel","bc","handleData","instanceParams","hashParams","access_token","accessToken","id_token","idToken","rest","_objectWithoutProperties","_excluded","postMessage","success","postMessageEventHandler","postMessageEvent","channel","once","DiscordHandler","setFinalUrl","finalUrl","clonedParams","finalJwtParams","deepmerge","response_type","RESPONSE_TYPE","client_id","scope","SCOPE","getUserInfo","get","headers","Authorization","id","avatar","email","username","discriminator","profileImage","verifierId","FacebookHandler","picture","GoogleHandler","prompt","PROMPT","JwtHandler","pathname","connection","user_info_route","domainUrl","warn","decodedToken","jwtDecode","MockLoginHandler","login_hint","phone_number","send","authParams","post","then","response","catch","RedditHandler","icon_img","TwitchHandler","force_verify","profile_image_url","display_name","WEBAUTHN_LOOKUP_SERVER","WebAuthnHandler","registerOnly","webauthnURL","register_only","parameters","ref","extraParamsPassed","extraParams","signature","clientDataJSON","authenticatorData","publicKey","challenge","rpOrigin","credId","transports","debug","verifier_id","extraVerifierParams","createHandler","PasswordlessHandler","registerServiceWorker","baseUrl","swUrl","register","ready","registered","cached","updatefound","updated","offline","SentryHandler","sentry","startTransaction","context","finishTransaction","tx","finish","StorageHelper","serverUrl","storageServerUrl","init","support","localStorageAvailable","currentStorageMethod","isInitialized","storeLoginDetails","privKey","keccak256","Buffer","from","privKeyHex","publicKeyHex","getPublic","encData","encryptData","sign","localStorage","retrieveLoginDetails","loginDetails","decryptData","status","getItem","clearLoginDetailsStorage","clearOrphanedLoginDetails","allStorageKeys","startsWith","CustomAuth","network","enableLogging","redirectPathName","apiKey","enableOneKey","web3AuthClientId","metadataUrl","baseUri","config","torus","Torus","legacyMetadataHost","setAPIKey","nodeDetailManager","NodeDetailManager","enableAll","disableAll","storageHelper","sentryHandler","skipSw","skipInit","skipPrefetch","fetchSwResponse","fetch","cache","ok","handlePrefetchRedirectUri","triggerLogin","args","verifierID","loginHandler","method","nodeTx","nodeDetails","getNodeDetails","lookupTx","torusPubKey","getPublicAddress","torusNodeEndpoints","torusNodePub","finalKeyData","oAuthKeyData","metadata","sessionData","torusKey","getTorusKey","triggerAggregateLogin","aggregateVerifierType","verifierIdentifier","subVerifierDetailsArray","Array","isArray","userInfoPromises","loginParamsArray","subVerifierDetail","loginParams","push","_userInfoArray","all","userInfoArray","map","aggregateVerifier","aggregateVerifierParams","verify_params","sub_verifier_ids","aggregateIdTokenSeeds","aggregateVerifierId","index","idtoken","sort","aggregateIdToken","join","String","fromCharCode","triggerHybridAggregateLogin","singleLogin","aggregateLoginParams","_excluded2","torusKey1Promise","torusKey2Promise","torusKey1","torusKey2","aggregateLogins","verifierParams","additionalParams","isLegacyNetwork","pubLookupTx","address","sharesTx","sharesResponse","retrieveShares","torusIndexes","getAggregateTorusKey","subVerifierInfoArray","getRedirectResult","replaceUrl","clearLoginDetails","substring","queryParams","value","cleanUrl","origin","history","replaceState","as","_await$this$storageHe","_excluded3","methodArgs","err","redirectHtml","createElement","crossOrigin","rel","resolveFn","relList","supports","onload","onerror","head","appendChild"],"mappings":"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"}